"""
Django settings for gobble project.
Generated by 'django-admin startproject' using Django 1.8.8.
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
from oscar.defaults import *
from oscar import OSCAR_MAIN_TEMPLATE_DIR
from oscar import get_core_apps
import decimal

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '#!%x+x3@l2)4f64jwk1c2i!fpgh!c!jopsg1fl)6*ym)wu)3@p'

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.flatpages',
    'compressor',
    'widget_tweaks',
] + get_core_apps()

SITE_ID = 1

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'oscar.apps.basket.middleware.BasketMiddleware',
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
)

ROOT_URLCONF = 'gobble.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, '../templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'oscar.apps.search.context_processors.search_form',
                'oscar.apps.promotions.context_processors.promotions',
                'oscar.apps.checkout.context_processors.checkout',
                'oscar.apps.customer.notifications.context_processors.notifications',
                'oscar.core.context_processors.metadata',
            ],
        },
    },
]

TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',
    'django.template.loaders.eggs.Loader',
)


WSGI_APPLICATION = 'gobble.wsgi.application'


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Calcutta'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_ROOT = 'staticfiles'
STATIC_URL = '/static/'

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, '../static'),
)


MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


AUTHENTICATION_BACKENDS = (
    'oscar.apps.customer.auth_backends.EmailBackend',
    'django.contrib.auth.backends.ModelBackend',
)


HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.simple_backend.SimpleEngine',
    }
}


# ***** OSCAR SETTINGS *****

# The initial status used when a new order is submitted.
# This has to be a status that is defined in the OSCAR_ORDER_STATUS_PIPELINE.
OSCAR_INITIAL_ORDER_STATUS = 'Pending'


# The status assigned to a line item when it is created as part of an new order.
# It has to be a status defined in OSCAR_ORDER_STATUS_PIPELINE.
OSCAR_INITIAL_LINE_STATUS = 'Pending'


# The pipeline defines the statuses that an order or line item can have and what transitions are allowed
# in any given status. The pipeline is defined as a dictionary where the keys are the available statuses.
# Allowed transitions are defined as iterable values for the corresponding status.
OSCAR_ORDER_STATUS_PIPELINE = {
    'Pending': ('Being Processed', 'Cancelled'),
    'Being Processed': ('Processed', 'Cancelled'),
    'Cancelled': (),
}


# This defines a mapping of status changes for order lines which ‘cascade’ down from an order status change.
# With this mapping, when an order has it’s status set to ‘Being processed’, all lines within it have their
# status set to ‘In progress’. In a sense, the status change cascades down to the related objects.
# Note that this cascade ignores restrictions from the OSCAR_LINE_STATUS_PIPELINE.
OSCAR_ORDER_STATUS_CASCADE = {
    'Being processed': 'In progress'
}


# Same as OSCAR_ORDER_STATUS_PIPELINE but for lines.
OSCAR_LINE_STATUS_PIPELINE = {}


# ***** DISPLAY SETTINGS *****

# The name of your e-commerce shop site. This is shown as the main logo within the default templates.
OSCAR_SHOP_NAME = 'PanchTatva alpha --- '


# The tagline that is displayed next to the shop name and in the browser title.
OSCAR_SHOP_TAGLINE = 'Start everything the Right way.'


# URL of home page of your site. This value is used for Home link in navigation and redirection page after logout.
# Useful if you use a different app to serve your homepage.
OSCAR_HOMEPAGE = reverse_lazy('promotions:home')


# Oscar has a view that gets called any time the user clicks on ‘My account’ or similar.
# By default it’s a dumb redirect to the view configured with this setting.
# But you could also override the view to display a more useful account summary page or such like.
OSCAR_ACCOUNTS_REDIRECT_URL = 'customer:profile-view'


# The number of recently viewed products to store.
OSCAR_RECENTLY_VIEWED_PRODUCTS = 10


# Default: 604800 (1 week in seconds)
# The time to live for the cookie in seconds.
OSCAR_RECENTLY_VIEWED_COOKIE_LIFETIME = 604800


# The name of the cookie for showing recently viewed products.
OSCAR_RECENTLY_VIEWED_COOKIE_NAME = 'gobble_history'


# ***** PAGINATION *****

# Settings that control pagination in Oscar’s views.
OSCAR_PRODUCTS_PER_PAGE = 10
OSCAR_OFFERS_PER_PAGE = 10
OSCAR_REVIEWS_PER_PAGE = 10
OSCAR_NOTIFICATIONS_PER_PAGE = 10
OSCAR_EMAILS_PER_PAGE = 10
OSCAR_ORDERS_PER_PAGE = 10
OSCAR_ADDRESSES_PER_PAGE = 10
OSCAR_STOCK_ALERTS_PER_PAGE = 10
OSCAR_DASHBOARD_ITEMS_PER_PAGE = 10


# A dictionary that specifies the facets to use with the search backend.
# It needs to be a dict with keys fields and queries for field- and query-type facets.
# OSCAR_SEARCH_FACETS = {
#     'fields': OrderedDict([
#         ('product_class', {'name': _('Type'), 'field': 'product_class'}),
#         ('rating', {'name': _('Rating'), 'field': 'rating'}),
#     ]),
#     'queries': OrderedDict([
#         ('price_range',
#          {
#              'name': _('Price range'),
#              'field': 'price',
#              'queries': [
#                  # This is a list of (name, query) tuples where the name will
#                  # be displayed on the front-end.
#                  (_('0 to 20'), u'[0 TO 20]'),
#                  (_('20 to 40'), u'[20 TO 40]'),
#                  (_('40 to 60'), u'[40 TO 60]'),
#                  (_('60+'), u'[60 TO *]'),
#              ]
#          }),
#     ]),
# }


# The search handler to be used in the product list views.
# If None, Oscar tries to guess the correct handler based on your Haystack settings.
OSCAR_PRODUCT_SEARCH_HANDLER = None


# The choice of display locations available when editing a promotion. Only useful when using a new set of templates.
OSCAR_PROMOTION_POSITIONS = (('page', 'Page'),
                             ('right', 'Right-hand sidebar'),
                             ('left', 'Left-hand sidebar'))


# Defines the available promotion block types that can be used in Oscar.
COUNTDOWN, LIST, SINGLE_PRODUCT, TABBED_BLOCK = (
    'Countdown', 'List', 'SingleProduct', 'TabbedBlock')
OSCAR_PROMOTION_MERCHANDISING_BLOCK_TYPES = (
    (COUNTDOWN, 'Vertical list'),
    (LIST, 'Horizontal list'),
    (TABBED_BLOCK, 'Tabbed block'),
    (SINGLE_PRODUCT, 'Single product'),
)


# A list of dashboard navigation elements. Usage is explained in How to configure the dashboard navigation.
# http://django-oscar.readthedocs.org/en/releases-1.1/howto/how_to_configure_the_dashboard_navigation.html
# This is not working currently
OSCAR_DASHBOARD_NAVIGATION += [
    {
        'label': ('test_menu','test_menu2'),
        'children': [
            {
                'label': 'sub_menu',
                'url_name': 'your-reverse-url-lookup-name',
            },
            {
                'label': 'sub_menu2',
                'url_name': 'your-reverse-url-lookup-name',
            },
         ]
    },
]


# OSCAR_DASHBOARD_NAVIGATION allows passing an access function for each node which is used to determine whether
# to show the node for a specific user or not. If no access function is defined, the function specified here is used.
# The default function integrates with the permission-based dashboard and shows the node if the user will be able
# to access it. That should be sufficient for most cases.
OSCAR_DASHBOARD_DEFAULT_ACCESS_FUNCTION = 'oscar.apps.dashboard.nav.default_access_fn'


# ***** CHECKOUT SETTINGS *****

# Specifies if an anonymous user can buy products without creating an account first.
# If set to False users are required to authenticate before they can checkout (using Oscar’s default checkout views).
OSCAR_ALLOW_ANON_CHECKOUT = False


# List of form fields that a user has to fill out to validate an address field.
OSCAR_REQUIRED_ADDRESS_FIELDS = ('first_name', 'last_name', 'Address', 'city', 'state', 'postcode', 'country')


# ***** REVIEW SETTINGS *****

# This setting defines whether an anonymous user can create a review for a product without registering first.
# If it is set to True anonymous users can create product reviews.
OSCAR_ALLOW_ANON_REVIEWS = False


# This defines whether reviews have to be moderated before they are publicly available.
# If set to False a review created by a customer is immediately visible on the product page.
OSCAR_MODERATE_REVIEWS = False


# ***** COMMUNICATION SETTINGS *****

# This enables sending alert notifications/emails instantly when products get back in stock by listening to
# stock record update signals this might impact performance for large numbers stock record updates.
# Alternatively, the management command oscar_send_alerts can be used to run periodically,
# e.g. as a cronjob. In this case instant alerts should be disabled.
OSCAR_EAGER_ALERTS = True

# Sending out welcome messages to a user after they have registered on the site can be enabled or
# disabled using this setting. Setting it to True will send out emails on registration.
OSCAR_SEND_REGISTRATION_EMAIL = True


# The email address used as the sender for all communication events and emails handled by Oscar.
OSCAR_FROM_EMAIL = 'panchtatv@support.com'


# A URL which is passed into the templates for communication events. It is not used in Oscar’s default templates
# but could be used to include static assets (eg images) in a HTML email template.
OSCAR_STATIC_BASE_URL = None


# ***** OFFER SETTINGS *****

# Default: Round down to the nearest hundredth of a unit using decimal.Decimal.quantize
# A function responsible for rounding decimal amounts when offer discount calculations don’t
# lead to legitimate currency values.
OSCAR_OFFER_ROUNDING_FUNCTION = decimal.Decimal.quantize


# ***** BASKET SETTINGS *****

# Default: 604800 (1 week in seconds)
# The time to live for the basket cookie in seconds.
OSCAR_BASKET_COOKIE_LIFETIME = 604800


# The maximum number of products that can be added to a basket at once.
OSCAR_MAX_BASKET_QUANTITY_THRESHOLD = None


# The name of the cookie for the open basket.
OSCAR_BASKET_COOKIE_OPEN = 'pt_open_basket'


# ***** CURRENCY SETTINGS *****

# This should be the symbol of the currency you wish Oscar to use by default.
# This will be used by the currency templatetag.
OSCAR_DEFAULT_CURRENCY = 'INR'


# This can be used to customise currency formatting. The value will be passed to the
# format_currency function from the Babel library.
# http://babel.pocoo.org/en/latest/api/numbers.html#babel.numbers.format_currency
OSCAR_CURRENCY_FORMAT = None


# ***** UPLOAD/MEDIA SETTINGS *****

# The location within the MEDIA_ROOT folder that is used to store product images.
# The folder name can contain date format strings as described in the Django Docs.
OSCAR_IMAGE_FOLDER = 'images/products/%Y/%m/'


# If enabled, a post_delete hook will attempt to delete any image files and created thumbnails
# when a model with an ImageField is deleted. This is usually desired,
# but might not be what you want when using a remote storage.
OSCAR_DELETE_IMAGE_FILES = True


# The folder within MEDIA_ROOT used for uploaded promotion images.
OSCAR_PROMOTION_FOLDER = 'images/promotions/'


# Copy this image from oscar/static/img to your MEDIA_ROOT folder. It needs to be there so Sorl can resize it.
OSCAR_MISSING_IMAGE_URL = 'image_not_found.jpg'


# The folder is used to temporarily hold uploaded files until they are processed.
# Such files should always be deleted afterwards.
OSCAR_UPLOAD_ROOT = '/tmp'


# ***** SLUG SETTINGS *****

# A dictionary to map strings to more readable versions for including in URL slugs. This mapping is applied before the
# slugify function. This is useful when names contain characters which would normally be stripped. For instance:
OSCAR_SLUG_MAP = {
    'c++': 'cpp',
    'f#': 'fsharp',
}


# The slugify function to use. Note that is used within Oscar’s slugify wrapper (in oscar.core.utils) which applies
# the custom map and blacklist. String notation is recommended, but specifying a callable is supported for
# backwards-compatibility.
# Example:
# # in myproject.utils
# def some_slugify(value):
#     return value
#
# # in settings.py
# OSCAR_SLUG_FUNCTION = 'myproject.utils.some_slugify'
OSCAR_SLUG_FUNCTION = 'oscar.core.utils.default_slugifier'


# A list of words to exclude from slugs.
OSCAR_SLUG_BLACKLIST = []


# ***** MISC SETTINGS *****

# Which cookies to delete automatically when the user logs out.
OSCAR_COOKIES_DELETE_ON_LOGOUT = ['oscar_recently_viewed_products',]

# Import other setting files
try:
    from .prod import *
except ImportError as e:
    pass

try:
    from .dev import *
except ImportError as e:
    pass